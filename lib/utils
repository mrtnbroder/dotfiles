#!/usr/bin/zsh

function e_ask {
    printf "\n$1\n"
    printf "(Y/n): "
}

function e_warn {
    printf "${Yellow}Warning: $1${NC}\n"
}

function e_error {
    printf "${Red}✘ $1${NC}\n"
    exit 1
}

function e_done {
    echo "${Green}✔ Done.${NC}"
}

function e_info {
    echo "\n${Cyan}➜ ${1}${NC}"
}

function link {
    # Force create/replace the symlink.
    ln -fs "$1" "${ZDOTDIR:-$HOME}/$2"
}

function is_confirmed {
    read -rs -k 1 ans
    case $ans in
        n|N)
            printf "No\n\n"
            return 1
            ;;
        y|Y|$'\n')
            printf "Yes\n\n"
            return 0
            ;;
        *)
            printf "\n\n"
            e_error "Please type in [y]es or [n]o.\n\n"
            return 1
    esac
}

function confirmed {
    if read; then
        # echo "Is '$REPLY' right?"
        return 0
    fi
    return 1
}

# Test whether a command exists
# $1 - cmd to test
function command_exists {
    if (( $+commands[$1] )); then
      return 0
    fi
    return 1
}

# Install native apps
function cask_exists {
    if ! brew cask info "${1}" | grep "Not installed" > /dev/null; then
        printf "%s already installed.\n" "$1"
        return 0
    fi

    e_warn "Missing App: $1"
    return 1
}

# Check for installed npm packages
function npm_exists {
    if echo $npm_list | grep $1 > /dev/null; then
        printf "%s already installed.\n" "$1"
        return 0
    fi

    e_warn "Missing Package: $1"
    return 1
}

# Check for gems
function gem_exists {
    if echo $gem_list | grep "$1" > /dev/null; then
        printf "%s already installed.\n" "$1"
        return 0
    fi

    e_warn "Missing gem: $1"
    return 1
}

# Test whether a Homebrew repo is already tapped
# $1 - formula name
function tap_exists {
    if echo $brew_taplist | grep "$1" > /dev/null; then
        printf "%s already tapped.\n" "$1"
        return 0
    fi

    e_warn "Missing Tap: $1"
    return 1
}

# Test whether a Homebrew formula is already installed
# $1 - formula name (may include options)
function formula_exists {
    if echo $brew_formulae | grep "$1" > /dev/null; then
        printf "%s already installed.\n" "$1"
        return 0
    fi

    e_warn "Missing formula: $1"
    return 1
}


function init_git_repo {
    # Initialize the git repository if it's missing
    e_info "Initializing git repository"
    git init
    git remote add origin $base_git
    git fetch origin master
    # Reset the index and working tree to the fetched HEAD
    # (submodules are cloned in the subsequent sync step)
    git reset --hard FETCH_HEAD
    # Remove any untracked files
    git clean -fd
    [ $? ] && e_done "Done"
}


function sync_git {
    # Sync with remote repository
    e_info "Updating dotfiles"
    # Pull down the latest changes
    git pull --rebase origin master
    # Update submodules
    e_info "Updating submodules"
    git submodule update --recursive --init --quiet
    [ $? ] && e_done "Done"
}


function link_prezto {
    # Load Prezto defaults
    for rcfile in $base_dir/modules/prezto/runcoms/^README.md(.N); do
        link "$rcfile" ".${rcfile:t}"
    done
}


function link_git {
    for gitfile in $base_dir/git/^README.md(.N); do
        link "$gitfile" ".${gitfile:t}"
    done
}


function create_gitconfig {

    if [[ ! -a "${ZDOTDIR:-$HOME}/.gitconfig.user" ]]; then

        # Create user gitconfig
        local gitconfiguser="${ZDOTDIR:-$HOME}/.gitconfig.user"
        local gitemail=
        local gitname=
        touch gitconfiguser

        vared -h -p "Enter your github user.name: " gitname
        vared -h -p "Enter your github user.email: " gitemail

        cat > $gitconfiguser <<EOT
[user]
    name = $gitname
    email = $gitemail
EOT
        e_info "successfully created ~/.gitconfig.user"
        # Cleanup
        unset gitconfiguser gitemail gitname
        return 0
    fi

    e_info "~/.gitconfig.user already exists"
    return 0
}

function link_vim {
    link "$base_dir/vim" ".vim"
    link "$base_dir/vim/vimrc" ".vimrc"
}